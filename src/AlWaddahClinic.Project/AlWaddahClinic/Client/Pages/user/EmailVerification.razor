@page "/user/verify-email"
@inject NavigationManager NavigationManager
@inject AuthenticationStateProvider AuthState
@inject IAuthService AuthService
@inject ILocalStorageService LocalStorage
@layout EmptyLayout


<MudGrid Justify="Justify.Center" Class="page-style">
    <MudItem xs="11" md="6" lg="6">
        <MudCard Style="width: 100%; padding: 2rem;text-align: center">
            <MudText Typo="Typo.h4"><b>Verify your email</b></MudText>
            <MudText Typo="Typo.h2" Color="Color.Success" Class="mb-3"><i class="bi bi-check-circle"></i></MudText>

            <MudButton Variant="Variant.Filled" Color="Color.Success" OnClick="ConfirmEmailAsync">Get Verified</MudButton>
        </MudCard>
    </MudItem>
</MudGrid>

<style>
    .page-style{
        height: 100vh;
        place-items: center;
        background-image: linear-gradient(to right, @(Colors.Green.Default), @(Colors.Green.Lighten1));
    }
</style>


@code{
    private string _errorMessage = string.Empty;
    private bool _isMakingRequest = false;

    private async Task<string> GetCurrentUserId()
    {
        var authState = await AuthState.GetAuthenticationStateAsync();
        var user = authState.User;

        return user.FindFirst(ClaimTypes.NameIdentifier).Value;
    }

    private async Task ConfirmEmailAsync()
    {
        _isMakingRequest = true;
        _errorMessage = string.Empty;
        try
        {
            var userId = await GetCurrentUserId();
            var result = await AuthService.VerifyUserAsync(userId);

            if(result.HasSucceeded)
        {
                await LocalStorage.SetItemAsStringAsync("access_token", result.Token);
                NavigationManager.NavigateTo("/");
        }

        }
        catch (DomainException ex)
        {
            _errorMessage = ex.Message;
        }
    }
}